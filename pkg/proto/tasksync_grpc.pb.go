// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/proto/tasksync.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskSyncServiceClient is the client API for TaskSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskSyncServiceClient interface {
	// SyncTask is a remote procedure call (RPC) to send a task update.
	SyncTask(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
}

type taskSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskSyncServiceClient(cc grpc.ClientConnInterface) TaskSyncServiceClient {
	return &taskSyncServiceClient{cc}
}

func (c *taskSyncServiceClient) SyncTask(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/proto.TaskSyncService/SyncTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskSyncServiceServer is the server API for TaskSyncService service.
// All implementations must embed UnimplementedTaskSyncServiceServer
// for forward compatibility
type TaskSyncServiceServer interface {
	// SyncTask is a remote procedure call (RPC) to send a task update.
	SyncTask(context.Context, *SyncRequest) (*SyncResponse, error)
	mustEmbedUnimplementedTaskSyncServiceServer()
}

// UnimplementedTaskSyncServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskSyncServiceServer struct {
}

func (UnimplementedTaskSyncServiceServer) SyncTask(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncTask not implemented")
}
func (UnimplementedTaskSyncServiceServer) mustEmbedUnimplementedTaskSyncServiceServer() {}

// UnsafeTaskSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskSyncServiceServer will
// result in compilation errors.
type UnsafeTaskSyncServiceServer interface {
	mustEmbedUnimplementedTaskSyncServiceServer()
}

func RegisterTaskSyncServiceServer(s grpc.ServiceRegistrar, srv TaskSyncServiceServer) {
	s.RegisterService(&TaskSyncService_ServiceDesc, srv)
}

func _TaskSyncService_SyncTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSyncServiceServer).SyncTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskSyncService/SyncTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSyncServiceServer).SyncTask(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskSyncService_ServiceDesc is the grpc.ServiceDesc for TaskSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TaskSyncService",
	HandlerType: (*TaskSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncTask",
			Handler:    _TaskSyncService_SyncTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/tasksync.proto",
}
